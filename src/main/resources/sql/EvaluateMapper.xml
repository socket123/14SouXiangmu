<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.vrv.mapper.EvaluateMapper" >
  <resultMap id="BaseResultMap" type="com.vrv.entity.Evaluate" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="order_id" property="orderId" jdbcType="INTEGER" />
    <result column="sendorreci" property="sendorreci" jdbcType="VARCHAR" />
    <result column="evaluate_userid" property="evaluateUserid" jdbcType="INTEGER" />
    <result column="evaluate_courier" property="evaluateCourier" jdbcType="INTEGER" />
    <result column="service_attitude" property="serviceAttitude" jdbcType="INTEGER" />
    <result column="timeliness" property="timeliness" jdbcType="INTEGER" />
    <result column="service_quality" property="serviceQuality" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="if_default" property="ifDefault" jdbcType="INTEGER" />
    <result column="team_id" property="teamId" jdbcType="INTEGER" />
    <result column="team_name" property="teamName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, order_id, sendorreci, evaluate_userid, evaluate_courier, service_attitude, timeliness, 
    service_quality, remark, create_time, if_default, team_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from evaluate
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from evaluate
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.vrv.entity.Evaluate" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into evaluate (order_id, sendorreci,
      evaluate_userid, evaluate_courier, service_attitude, 
      timeliness, service_quality, remark, 
      create_time, if_default ,team_id)
    values (#{orderId,jdbcType=INTEGER}, #{sendorreci,jdbcType=VARCHAR},
      #{evaluateUserid,jdbcType=INTEGER}, #{evaluateCourier,jdbcType=INTEGER}, #{serviceAttitude,jdbcType=INTEGER}, 
      #{timeliness,jdbcType=INTEGER}, #{serviceQuality,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{ifDefault,jdbcType=INTEGER}, #{teamId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.vrv.entity.Evaluate" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into evaluate
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="sendorreci != null" >
        sendorreci,
      </if>
      <if test="evaluateUserid != null" >
        evaluate_userid,
      </if>
      <if test="evaluateCourier != null" >
        evaluate_courier,
      </if>
      <if test="serviceAttitude != null" >
        service_attitude,
      </if>
      <if test="timeliness != null" >
        timeliness,
      </if>
      <if test="serviceQuality != null" >
        service_quality,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="ifDefault != null" >
        if_default,
      </if>
      <if test="teamId != null" >
        team_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderId != null" >
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="sendorreci != null" >
        #{sendorreci,jdbcType=VARCHAR},
      </if>
      <if test="evaluateUserid != null" >
        #{evaluateUserid,jdbcType=INTEGER},
      </if>
      <if test="evaluateCourier != null" >
        #{evaluateCourier,jdbcType=INTEGER},
      </if>
      <if test="serviceAttitude != null" >
        #{serviceAttitude,jdbcType=INTEGER},
      </if>
      <if test="timeliness != null" >
        #{timeliness,jdbcType=INTEGER},
      </if>
      <if test="serviceQuality != null" >
        #{serviceQuality,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ifDefault != null" >
        #{ifDefault,jdbcType=INTEGER},
      </if>
      <if test="teamId != null" >
        #{teamId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.vrv.entity.Evaluate" >
    update evaluate
    <set >
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="sendorreci != null" >
        sendorreci = #{sendorreci,jdbcType=VARCHAR},
      </if>
      <if test="evaluateUserid != null" >
        evaluate_userid = #{evaluateUserid,jdbcType=INTEGER},
      </if>
      <if test="evaluateCourier != null" >
        evaluate_courier = #{evaluateCourier,jdbcType=INTEGER},
      </if>
      <if test="serviceAttitude != null" >
        service_attitude = #{serviceAttitude,jdbcType=INTEGER},
      </if>
      <if test="timeliness != null" >
        timeliness = #{timeliness,jdbcType=INTEGER},
      </if>
      <if test="serviceQuality != null" >
        service_quality = #{serviceQuality,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ifDefault != null" >
        if_default = #{ifDefault,jdbcType=INTEGER},
      </if>
      <if test="teamId != null" >
        team_id = #{teamId,jdbcType=INTEGER},
    </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.vrv.entity.Evaluate" >
    update evaluate
    set order_id = #{orderId,jdbcType=INTEGER},
      sendorreci = #{sendorreci,jdbcType=VARCHAR},
      evaluate_userid = #{evaluateUserid,jdbcType=INTEGER},
      evaluate_courier = #{evaluateCourier,jdbcType=INTEGER},
      service_attitude = #{serviceAttitude,jdbcType=INTEGER},
      timeliness = #{timeliness,jdbcType=INTEGER},
      service_quality = #{serviceQuality,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      if_default = #{ifDefault,jdbcType=INTEGER},
      team_id = #{teamId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getTotalCount" resultType="java.lang.Integer" parameterType="java.util.Map">
    SELECT count(*) FROM evaluate
  </select>

  <select id="getList" resultMap="BaseResultMap" parameterType="java.util.Map">
    SELECT a.*,b.waybill_number as waybillNumber,c.user_name as userName,d.user_name as courierName FROM evaluate a
    LEFT JOIN ss_order b on b.id = order_id
    LEFT JOIN ss_user c on c.id = evaluate_userid
    LEFT JOIN ss_user d on d.id = evaluate_courier
    order by create_time
    limit #{offset},#{size}
  </select>
  <select id="findEvaluateAnalysis"  parameterType="java.lang.String" resultMap="BaseResultMap">
    select team_name,a.id,IFNULL(service_attitude,4) as service_attitude ,IFNULL(timeliness,4) as timeliness
    ,IFNULL(service_quality,4) as service_quality
    from transport_team a left join (
    select team_id, avg(service_attitude) as service_attitude ,avg(timeliness) as timeliness , avg(service_quality) as service_quality from evaluate
    where
    <![CDATA[
				 DATE_FORMAT(create_time, '%Y~%m~%d' ) >= DATE_FORMAT(#{startTime}, '%Y~%m~%d' )
				]]>
      <![CDATA[
					 AND  DATE_FORMAT(create_time, '%Y~%m~%d' ) <= DATE_FORMAT(#{endTime}, '%Y~%m~%d' )
				]]>
    group by team_id
    ) as b on b.team_id = a.id
  </select>

  <select id="findEvaluateAnalysisByTeam"  parameterType="java.lang.String" resultMap="BaseResultMap">
    select team_name,a.id,IFNULL(service_attitude,4) as service_attitude ,IFNULL(timeliness,4) as timeliness
    ,IFNULL(service_quality,4) as service_quality
    from transport_team a left join (
    select team_id, avg(service_attitude) as service_attitude ,avg(timeliness) as timeliness , avg(service_quality) as service_quality from evaluate
    where
    <![CDATA[
				 DATE_FORMAT(create_time, '%Y~%m~%d' ) >= DATE_FORMAT(#{startTime}, '%Y~%m~%d' )
				]]>
    <![CDATA[
					 AND  DATE_FORMAT(create_time, '%Y~%m~%d' ) <= DATE_FORMAT(#{endTime}, '%Y~%m~%d' )
				]]>
    group by team_id
    ) as b on b.team_id = a.id
    where a.id=#{teamId}
  </select>



</mapper>